local GameModule = {}

function GameModule.Install(obj)
	local rows = 10
	local cols = 10
	local mineCount = 15
	local cellSize = 30

	local gameOver = false
	local gameStarted = false
	local flagMode = false
	local elapsedTime = 0
	local revealedCount = 0
	local totalCells = rows * cols
	local grid = {}

	local container = obj

	local topPanel = Instance.new("Frame")
	topPanel.Size = UDim2.new(0, cols * cellSize, 0, 40)
	topPanel.Position = UDim2.new(0.5, - (cols * cellSize) / 2, 0, -50)
	topPanel.BackgroundTransparency = 1
	topPanel.Parent = container

	local remainingMinesLabel = Instance.new("TextLabel")
	remainingMinesLabel.Size = UDim2.new(0, 80, 0, 40)
	remainingMinesLabel.Position = UDim2.new(0, 0, 0, 0)
	remainingMinesLabel.Text = tostring(mineCount)
	remainingMinesLabel.Font = Enum.Font.SourceSansBold
	remainingMinesLabel.TextSize = 24
	remainingMinesLabel.Parent = topPanel

	local flagToggleButton = Instance.new("TextButton")
	flagToggleButton.Size = UDim2.new(0, 80, 0, 40)
	flagToggleButton.Position = UDim2.new(0, 80, 0, 0)
	flagToggleButton.Text = "Reveal Mode"
	flagToggleButton.Font = Enum.Font.SourceSansBold
	flagToggleButton.TextSize = 18
	flagToggleButton.Parent = topPanel

	local faceButton = Instance.new("TextButton")
	faceButton.Size = UDim2.new(0, 40, 0, 40)
	faceButton.Position = UDim2.new(0.5, 25, 0, 0)
	faceButton.Text = "ðŸ™‚"
	faceButton.Font = Enum.Font.SourceSansBold
	faceButton.TextSize = 24
	faceButton.Parent = topPanel

	local timerLabel = Instance.new("TextLabel")
	timerLabel.Size = UDim2.new(0, 80, 0, 40)
	timerLabel.Position = UDim2.new(1, -80, 0, 0)
	timerLabel.Text = "0"
	timerLabel.Font = Enum.Font.SourceSansBold
	timerLabel.TextSize = 24
	timerLabel.Parent = topPanel

	local gameFrame = Instance.new("Frame")
	gameFrame.Size = UDim2.new(0, cols * cellSize, 0, rows * cellSize)
	gameFrame.Position = UDim2.new(0.5, - (cols * cellSize) / 2, 0.5, - (rows * cellSize) / 2)
	gameFrame.BackgroundColor3 = Color3.new(0.8, 0.8, 0.8)
	gameFrame.Parent = container

	local replayButton = Instance.new("TextButton")
	replayButton.Size = UDim2.new(0, 100, 0, 40)
	replayButton.Position = UDim2.new(0.5, -50, 0.5, (rows * cellSize) / 2 + 10)
	replayButton.Text = "ReStart"
	replayButton.Font = Enum.Font.SourceSansBold
	replayButton.TextSize = 20
	replayButton.Visible = false
	replayButton.Parent = container

	local sound = Instance.new("Sound")
	sound.Parent = obj
	sound.Name = "Explode"
	sound.SoundId = "rbxassetid://18763884961"
	sound.Volume = 200

	local function countAdjacent(r, c)
		local count = 0
		for i = -1, 1 do
			for j = -1, 1 do
				local nr = r + i
				local nc = c + j
				if nr >= 1 and nr <= rows and nc >= 1 and nc <= cols then
					if grid[nr][nc] and grid[nr][nc].isMine then
						count = count + 1
					end
				end
			end
		end
		return count
	end

	local function revealCell(r, c)
		if r < 1 or r > rows or c < 1 or c > cols then return end
		local cell = grid[r][c]
		if cell.revealed or cell.flagged then return end

		cell.revealed = true
		revealedCount = revealedCount + 1
		local btn = cell.button

		if cell.isMine then
			btn.Text = "ðŸ’£"
			btn.BackgroundColor3 = Color3.new(1, 0, 0)
		else
			if cell.adjacent > 0 then
				btn.Text = tostring(cell.adjacent)
			end
			btn.BackgroundColor3 = Color3.new(0.9, 0.9, 0.9)
		end

		if (not cell.isMine) and cell.adjacent == 0 then
			for i = -1, 1 do
				for j = -1, 1 do
					if not (i == 0 and j == 0) then
						revealCell(r + i, c + j)
					end
				end
			end
		end
	end

	local function revealAllMines()
		for r = 1, rows do
			for c = 1, cols do
				local cell = grid[r][c]
				if cell.isMine and not cell.revealed then
					cell.button.Text = "ðŸ’£"
					cell.button.BackgroundColor3 = Color3.new(1, 0, 0)
				end
			end
		end
	end

	local function checkWin()
		return revealedCount == totalCells - mineCount
	end

	local function initGame()
		gameOver = false
		gameStarted = false
		flagMode = false
		elapsedTime = 0
		revealedCount = 0
		remainingMinesLabel.Text = tostring(mineCount)
		timerLabel.Text = "0"
		faceButton.Text = "ðŸ™‚"
		flagToggleButton.Text = "Reveal Mode"
		replayButton.Visible = false

		gameFrame:ClearAllChildren()
		grid = {}

		for r = 1, rows do
			grid[r] = {}
			for c = 1, cols do
				grid[r][c] = {
					isMine = false,
					adjacent = 0,
					revealed = false,
					flagged = false,
					button = nil
				}
			end
		end

		local placed = 0
		while placed < mineCount do
			local r = math.random(1, rows)
			local c = math.random(1, cols)
			if not grid[r][c].isMine then
				grid[r][c].isMine = true
				placed = placed + 1
			end
		end

		for r = 1, rows do
			for c = 1, cols do
				if not grid[r][c].isMine then
					grid[r][c].adjacent = countAdjacent(r, c)
				end
			end
		end

		for r = 1, rows do
			for c = 1, cols do
				local button = Instance.new("TextButton")
				button.Size = UDim2.new(0, cellSize, 0, cellSize)
				button.Position = UDim2.new(0, (c - 1) * cellSize, 0, (r - 1) * cellSize)
				button.Text = ""
				button.Font = Enum.Font.SourceSansBold
				button.TextSize = 20
				button.BackgroundColor3 = Color3.new(1, 1, 1)
				button.Parent = gameFrame

				grid[r][c].button = button


				button.MouseEnter:Connect(function()
					if not gameOver then
						faceButton.Text = "ðŸ˜¯"
					end
				end)
				button.MouseLeave:Connect(function()
					if not gameOver then
						faceButton.Text = "ðŸ™‚"
					end
				end)

				button.MouseButton1Click:Connect(function()
					if gameOver then return end

					if not gameStarted then
						gameStarted = true
						spawn(function()
							while gameStarted and not gameOver do
								wait(1)
								elapsedTime = elapsedTime + 1
								timerLabel.Text = tostring(elapsedTime)
							end
						end)
					end

					if flagMode then
						if not grid[r][c].revealed then
							grid[r][c].flagged = not grid[r][c].flagged
							if grid[r][c].flagged then
								button.Text = "ðŸš©"
								button.BackgroundColor3 = Color3.new(0.8, 0.8, 1)
							else
								button.Text = ""
								button.BackgroundColor3 = Color3.new(1, 1, 1)
							end
							local flaggedCount = 0
							for i = 1, rows do
								for j = 1, cols do
									if grid[i][j].flagged then
										flaggedCount = flaggedCount + 1
									end
								end
							end
							remainingMinesLabel.Text = tostring(mineCount - flaggedCount)
						end
					else
						if grid[r][c].flagged then return end

						revealCell(r, c)
						if grid[r][c].isMine then
							sound:Play()
							gameOver = true
							faceButton.Text = "ðŸ˜µ"
							revealAllMines()
							replayButton.Visible = true

						elseif checkWin() then
							gameOver = true
							faceButton.Text = "ðŸ˜Ž"
							replayButton.Visible = true
						end
					end
				end)
			end
		end
	end


	replayButton.MouseButton1Click:Connect(function()
		sound:Stop()
		initGame()
	end)


	flagToggleButton.MouseButton1Click:Connect(function()
		flagMode = not flagMode
		if flagMode then
			flagToggleButton.Text = "Flag Mode"
		else
			flagToggleButton.Text = "Reveal Mode"
		end
	end)


	faceButton.MouseButton1Click:Connect(function()
		initGame()
	end)


	initGame()

end

return GameModule
